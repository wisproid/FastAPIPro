on:
  workflow_dispatch:
  push:
    branches:
      - publish/dev
    paths:
      - "src/**"
      - "k8s/**"
      - "setup.cfg"
      - "Dockerfile"
      - ".github/workflows/deploy2kube2dev2azure.yaml"
      - "migrations/**"
      - "__version__"
    
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false  # false: try to complete all jobs
      matrix:
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Build wheel
        run: |
          python script_update_requirements.py
          export SETUPTOOLS_SCM_PRETEND_VERSION=$(cat __version__)
          pip install setuptools setuptools-scm wheel 
          python setup.py bdist_wheel
          tree -L 2 .

      - name: Upload file
        uses: actions/upload-artifact@v4
        with:
          name: my-artifact
          path: | 
            ./dist/*.whl
            ./k8s/*.yaml
            ./Dockerfile
            ./requirements.txt
            ./alembic-docker.ini
            ./__version__

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build]
    environment: azure_kerb_centralindia_dev

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: my-artifact

      - name: Listed the files
        run: tree -L 2 .
      
      - name: Setup K8S namespace
        run: | 
          echo "TARGET_NAMESPACE=iotm2-dev-ns" >> $GITHUB_ENV
          echo ${{ env.TARGET_NAMESPACE }}

      - name: Scan version number
        run: | 
          export APP_VERSION=$(cat __version__)
          export APP_IMAGE=${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io/iotm2:$APP_VERSION
          echo "APP_IMAGE=$APP_IMAGE" >> $GITHUB_ENV
          echo $APP_VERSION
          echo $APP_IMAGE

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 'Log into Azure using github secret AZURE_CREDENTIALS'
        uses: Azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login into Azure Container Registries
        run: az acr login --name ${{ vars.CONTAINER_REGISTRY_NAME }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.APP_IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GITHUB_SHA=${{ github.sha }}

      - name: 'Show azure account'
        run: |
          az account show
          az aks get-credentials -g ${{ vars.AZURE_RESOURCE_GROUP }} -n ${{ vars.K8S_CLUSTER_NAME }}
          kubectl config use-context ${{ vars.K8S_CLUSTER_NAME }}

      - name: Database migration
        run: |
          export DATABASE_URL=${{ secrets.DATABASE_URL }}
          envsubst < k8s/dbmigration_job.yaml | kubectl apply --force -n ${{ env.TARGET_NAMESPACE }} -f -

      - name: Wait for job to complete
        run: |
          export JOB_NAME=iotm2-dbmigration-job
          kubectl wait --for=condition=complete --timeout=30s job/$JOB_NAME -n ${{ env.TARGET_NAMESPACE }}

      - name: Get job exit code
        id: get-exit-code
        run: |
          export POD_NAME=$(kubectl get pods --selector=job-name=$JOB_NAME -n ${{ env.TARGET_NAMESPACE }} -o jsonpath='{.items[0].metadata.name}')
          export EXIT_CODE=$(kubectl get pod $POD_NAME -n ${{ env.TARGET_NAMESPACE }} -o jsonpath='{.status.containerStatuses[0].state.terminated.exitCode}')
          echo "::set-output name=exit-code::$EXIT_CODE"

      - name: Check exit code
        run: |
          if [ "${{ steps.get-exit-code.outputs.exit-code }}" -ne 0 ]; then
            echo "Migration job failed with exit code ${{ steps.get-exit-code.outputs.exit-code }}"
            exit 1
          else
            echo "Migration job completed successfully"
          fi

      - name: 'Apply k8s manifests'
        run: |
          export DATABASE_URL=${{ secrets.DATABASE_URL }}
          export JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          export JWT_ALGORITHM=${{ secrets.JWT_ALGORITHM }}
          export JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.JWT_ACCESS_TOKEN_EXPIRE_MINUTES }}
          envsubst < k8s/deployment.yaml | kubectl apply -n ${{ env.TARGET_NAMESPACE }} -f -
