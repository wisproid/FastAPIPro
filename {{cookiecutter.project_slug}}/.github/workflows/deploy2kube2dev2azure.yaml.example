on:
  workflow_dispatch:
  push:
    branches:
      - publish/dev
    paths:
      - "src/**"
      - "k8s/**"
      - "Dockerfile"
      - ".github/workflows/deploy2kube2dev2azure.yaml"
      - "migrations/**"
      - "pyproject.toml"
    
jobs:
  build:
    name: CICD
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Define App Name
        run: | 
          echo "APP_NAME=<project_name>" >> $GITHUB_ENV

      - name: Define K8S namespace
        run: | 
          echo "TARGET_NAMESPACE=<project_name>-dev-ns" >> $GITHUB_ENV

      - name: Define docker tag
        run: |
          export APP_VER=$(grep -Po '(?<=^version = ")[^"]*' pyproject.toml)
          echo "APP_VERSION=$APP_VER" >> $GITHUB_ENV
          echo APP_IMAGE="${{ vars.DEV_DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:dev-$APP_VER" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DEV_DOCKERHUB_USERNAME }}
          password: ${{ secrets.DEV_DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.APP_IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GITHUB_SHA=${{ github.sha }}

      - name: 'Log into Azure using github secret AZURE_CREDENTIALS'
        uses: Azure/login@v2
        with:
          creds: ${{ secrets.DEV_AZURE_CREDENTIALS }}

      - name: 'Show azure account'
        run: |
          az account show
          az aks get-credentials -g ${{ vars.DEV_AZURE_RESOURCE_GROUP }} -n ${{ vars.DEV_K8S_CLUSTER_NAME }}
          kubectl config use-context ${{ vars.DEV_K8S_CLUSTER_NAME }}

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq
  
      - name: Modify YAML file with yq
        run: |
          yq eval '.spec.template.spec.imagePullSecrets += [{"name": "${{ vars.DEV_K8S_DOCKERHUB_AUTH }}"}]' -i k8s/dbmigration_job.yaml
          yq eval '.spec.template.spec.imagePullSecrets += [{"name": "${{ vars.DEV_K8S_DOCKERHUB_AUTH }}"}]' -i k8s/deployment.yaml
          cat k8s/dbmigration_job.yaml
          cat k8s/deployment.yaml

      - name: Database migration
        run: |
          export DATABASE_URL=${{ secrets.DEV_DATABASE_URL }}
          envsubst < k8s/dbmigration_job.yaml | kubectl apply --force -n ${{ env.TARGET_NAMESPACE }} -f -

      - name: Wait for job to complete
        run: |
          export JOB_NAME=${{ env.APP_NAME }}-dbmigration-job
          kubectl wait --for=condition=complete --timeout=60s job/$JOB_NAME -n ${{ env.TARGET_NAMESPACE }}

      - name: Get job exit code
        id: get-exit-code
        run: |
          export POD_NAME=$(kubectl get pods --selector=job-name=$JOB_NAME -n ${{ env.TARGET_NAMESPACE }} -o jsonpath='{.items[0].metadata.name}')
          export EXIT_CODE=$(kubectl get pod $POD_NAME -n ${{ env.TARGET_NAMESPACE }} -o jsonpath='{.status.containerStatuses[0].state.terminated.exitCode}')
          echo "::set-output name=exit-code::$EXIT_CODE"

      - name: Check exit code
        run: |
          if [ "${{ steps.get-exit-code.outputs.exit-code }}" -ne 0 ]; then
            echo "Migration job failed with exit code ${{ steps.get-exit-code.outputs.exit-code }}"
            exit 1
          else
            echo "Migration job completed successfully"
          fi

      - name: 'Apply k8s manifests'
        run: |
          export DATABASE_URL=${{ secrets.DEV_DATABASE_URL }}
          export JWT_SECRET_KEY=${{ secrets.DEV_JWT_SECRET_KEY }}
          export JWT_ALGORITHM=${{ secrets.DEV_JWT_ALGORITHM }}
          export JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.DEV_JWT_ACCESS_TOKEN_EXPIRE_MINUTES }}
          envsubst < k8s/deployment.yaml | kubectl apply -n ${{ env.TARGET_NAMESPACE }} -f -
